name: Build macOS App (.app)

on:
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.11'
  PLAYWRIGHT_BROWSERS_PATH: ./ms-playwright
  NUITKA_ASSUME_YES_FOR_DOWNLOADS: "1"

jobs:
  build-mac:
    runs-on: macos-latest  # Apple Silicon runner

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip (macOS)
        uses: actions/cache@v4
        with:
          path: ~/Library/Caches/pip
          key: pip-mac-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ hashFiles('**/requirements.txt') }}

      - name: Install deps and Playwright browsers
        run: |
          python -m pip install -U pip
          pip install -r requirements.txt
          pip install nuitka ordered-set zstandard
          python -m playwright install chromium

      - name: Pack ms-playwright to TGZ
        run: |
          rm -f ms-playwright.tgz
          tar -czf ms-playwright.tgz ms-playwright
          rm -rf ms-playwright

      - name: Locate Tcl/Tk resource dirs (macOS)
        id: tcltk
        shell: bash
        env:
          TK_SILENCE_DEPRECATION: "1"
        run: |
          # 让 Tk 自己报告库路径（在 CI 上不需要显示器也能跑）
          eval "$(
            python - <<'PY'
          import tkinter
          r = tkinter.Tk()
          print("TCL_DIR='"+r.tk.eval('set tcl_library')+"'")
          print("TK_DIR='"+r.tk.eval('set tk_library')+"'")
          r.destroy()
          PY
              )"
      
          # 兜底（部分镜像不设置 tk_library），尝试按常见框架路径找
          if [ -z "$TK_DIR" ] || [ ! -d "$TK_DIR" ]; then
            for v in 8.7 8.6; do
              CAND="/Library/Frameworks/Tk.framework/Versions/$v/Resources/Scripts"
              if [ -d "$CAND" ]; then TK_DIR="$CAND"; break; fi
            done
          fi
          if [ -z "$TCL_DIR" ] || [ ! -d "$TCL_DIR" ]; then
            for v in 8.7 8.6; do
              CAND="/Library/Frameworks/Tcl.framework/Versions/$v/Resources/Scripts"
              if [ -d "$CAND" ]; then TCL_DIR="$CAND"; break; fi
            done
          fi
      
          if [ -z "$TCL_DIR" ] || [ ! -d "$TCL_DIR" ]; then
            echo "TCL dir not found"; exit 1
          fi
          if [ -z "$TK_DIR" ] || [ ! -d "$TK_DIR" ]; then
            echo "TK dir not found"; exit 1
          fi
      
          echo "tcl_dir=$TCL_DIR" >> "$GITHUB_OUTPUT"
          echo "tk_dir=$TK_DIR"  >> "$GITHUB_OUTPUT"
      
          echo "Resolved Tcl dir: $TCL_DIR"
          echo "Resolved Tk  dir: $TK_DIR"

      - name: Build .app with Nuitka (macOS)
        run: |
          python -m nuitka app.py \
            --standalone \
            --onefile \
            --enable-plugin=tk-inter \
            --macos-create-app-bundle \
            --macos-app-name=WebImageSaver \
            --macos-app-version=1.0.0 \
            --include-data-dir="${{ steps.tcltk.outputs.tcl_dir }}=tcl" \
            --include-data-dir="${{ steps.tcltk.outputs.tk_dir }}=tk" \
            --include-data-files=ms-playwright.tgz=ms-playwright.tgz \
            --output-dir=build \
            --lto=no \
            --assume-yes-for-downloads

      # 可选：ad-hoc 签名，降低 Gatekeeper 提示（不是正式签名/公证）
      - name: Ad-hoc codesign
        run: |
          codesign --force --deep --sign - "build/WebImageSaver.app" || true

      # （可选）看一下构建目录里到底产出了什么，方便以后排查
      - name: List build folder
        run: |
          echo "== ls -la build =="
          ls -la build || true
          echo "== find build -maxdepth 2 =="
          find build -maxdepth 2 -print || true

      # 自动定位 .app
      - name: Locate built .app
        id: appfinder
        shell: bash
        run: |
          set -e
          APP_PATH="$(find build -maxdepth 2 -type d -name '*.app' | head -n1 || true)"
          if [ -z "$APP_PATH" ]; then
            echo "No .app found. Contents of build:"
            find build -maxdepth 3 -print || true
            exit 1
          fi
          echo "Found app: $APP_PATH"
          echo "app_path=$APP_PATH" >> "$GITHUB_OUTPUT"

      # 用找到的路径来打 zip
      - name: Zip artifact (macOS .app)
        shell: bash
        run: |
          APP_PATH="${{ steps.appfinder.outputs.app_path }}"
          APP_DIRNAME="$(dirname "$APP_PATH")"
          APP_BASENAME="$(basename "$APP_PATH")"
          cd "$APP_DIRNAME"
          zip -r ../WebImageSaver-macos.zip "$APP_BASENAME"


      - uses: actions/upload-artifact@v4
        with:
          name: WebImageSaver-macos.zip
          path: WebImageSaver-macos.zip

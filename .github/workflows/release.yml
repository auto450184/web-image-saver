name: Build Apps with Nuitka (Win + Mac)

on:
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.11'
  PLAYWRIGHT_BROWSERS_PATH: ./ms-playwright
  NUITKA_ASSUME_YES_FOR_DOWNLOADS: "1"

jobs:
  build-win:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip (Windows)
        uses: actions/cache@v4
        with:
          path: ~\AppData\Local\pip\Cache
          key: pip-win-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ hashFiles('**/requirements.txt') }}

      - name: Install deps and browsers
        shell: pwsh
        run: |
          python -m pip install -U pip
          pip install -r requirements.txt
          pip install nuitka ordered-set zstandard pefile
          python -m playwright install chromium

      - name: Pack ms-playwright to TGZ
        shell: pwsh
        run: |
          if (Test-Path ms-playwright.tgz) { Remove-Item ms-playwright.tgz -Force }
          tar -czf ms-playwright.tgz ms-playwright
          Remove-Item -Recurse -Force ms-playwright

      - name: Build EXE with Nuitka (Windows)
        shell: pwsh
        run: |
          python -m nuitka app.py `
            --onefile `
            --standalone `
            --windows-console-mode=disable `
            --enable-plugin=tk-inter `
            --include-data-files=ms-playwright.tgz=ms-playwright.tgz `
            --output-filename=WebImageSaver.exe `
            --output-dir=build `
            --lto=no `
            --assume-yes-for-downloads

      - name: Zip artifact (Win)
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Path dist -Force | Out-Null
          Copy-Item build\WebImageSaver.exe dist\
          if (Test-Path ms-playwright.tgz) { Copy-Item ms-playwright.tgz dist\ }
          Compress-Archive -Path dist\* -DestinationPath WebImageSaver-win64.zip -Force

      - uses: actions/upload-artifact@v4
        with:
          name: WebImageSaver-win64.zip
          path: WebImageSaver-win64.zip

  build-mac:
    runs-on: macos-latest   # ARM runner（Apple Silicon）
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip (macOS)
        uses: actions/cache@v4
        with:
          path: ~/Library/Caches/pip
          key: pip-mac-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ hashFiles('**/requirements.txt') }}

      - name: Install deps and browsers
        run: |
          python -m pip install -U pip
          pip install -r requirements.txt
          pip install nuitka ordered-set zstandard
          python -m playwright install chromium

      - name: Pack ms-playwright to TGZ
        run: |
          rm -f ms-playwright.tgz
          tar -czf ms-playwright.tgz ms-playwright
          rm -rf ms-playwright

      # 这里先做“单文件可执行”，最稳；若想做 .app，可再换为 create-app-bundle
      - name: Build executable with Nuitka (macOS)
        run: |
          python -m nuitka app.py \
            --onefile \
            --standalone \
            --enable-plugin=tk-inter \
            --include-data-files=ms-playwright.tgz=ms-playwright.tgz \
            --output-filename=WebImageSaver-macos \
            --output-dir=build \
            --lto=no \
            --assume-yes-for-downloads

      - name: Zip artifact (macOS)
        run: |
          mkdir -p dist
          cp build/WebImageSaver-macos dist/
          if [ -f ms-playwright.tgz ]; then cp ms-playwright.tgz dist/; fi
          cd dist && zip -r ../WebImageSaver-macos.zip .

      - uses: actions/upload-artifact@v4
        with:
          name: WebImageSaver-macos.zip
          path: WebImageSaver-macos.zip
